# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = clippybot
description = A really annoying bot. 
author = the-ivo-robotnic
author_email = ivo@elips.is
license = MIT
license_files = LICENSE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/the-ivo-robotnic/twitch-clippybot
project_urls =
   Source = https://github.com/the-ivo-robotnic/twitch-clippybot
   Changelog = https://github.com/the-ivo-robotnic/twitch-clippybot/blob/main/CHANGELOG.rst
   Tracker = https://github.com/the-ivo-robotnic/twitch-clippybot/issues

platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.12

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    flask==3.0.3
    flask-login==0.6.3
    flask-sqlalchemy==3.1.1
    obsws-python==1.7.0
    twitchAPI==4.2.1
    functools==0.5 
    importlib-metadata

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install obs-media-triggesemicolon/line-separated)
testing =
    build
    pyflakes
    setuptools

[options.entry_points]
console_scripts =
    clippybot = clippybot.__main__:main

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov clippybot --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
max_line_length = 88
extend_ignore = E203, W503
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
version = 4.5
package = clippybot
